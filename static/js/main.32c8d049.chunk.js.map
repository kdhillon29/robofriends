{"version":3,"sources":["components/card.js","components/cardlist.js","components/searchbar.js","components/scroll.js","containers/errorboundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","robo","handleclick","onClick","id","className","src","title","username","name","email","Cardlist","robots","console","log","alert","map","robot","i","key","Searchbar","value","onChange","placeholder","type","aria-describedby","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","haserror","error","info","this","setState","React","Component","App","handleChange","e","target","length","searchfield","fetch","then","response","json","users","catch","er","srobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAuBeA,G,KApBF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAKC,EAAe,EAAfA,YAEZ,OAGP,6BAASC,QAAS,kBAAID,EAAYD,IAAOG,GAAKH,EAAKG,GAAIC,UAAU,oCACzD,yBAAKA,UAAU,MACvB,yBAAKC,IAAG,iCAA4BL,EAAKG,GAAjC,YACPC,UAAU,sCACVE,MAAM,oCACJ,wBAAIF,UAAU,UAAUJ,EAAKO,UAC7B,wBAAIH,UAAU,oBAAd,UAAqCJ,EAAKQ,OAC1C,wBAAIJ,UAAU,oBAAd,UAAqCJ,EAAKS,YCI/BC,EAhBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAERV,EAAa,SAACD,GACXY,QAAQC,IAAR,qBAA0Bb,EAAKO,WAC/BO,MAAM,cAAD,OAAed,EAAKO,YAG9B,OACM,yBAAKH,UAAU,uCACnBO,EAAOI,KAAI,SAACC,EAAMC,GAAP,OAAY,kBAAC,EAAD,CAAMhB,YAAaA,EAAaiB,IAAKD,EAAGjB,KAAMgB,SCWjEG,EArBG,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAMC,EAAa,EAAbA,SAElB,OAGI,yBAAKjB,UAAU,WAEjB,2BAAOD,GAAG,OAAOiB,MAAOA,EAAOC,SAAUA,EAAUC,YAAY,UAC9DlB,UAAU,yCACTmB,KAAK,OAAOC,mBAAiB,gBCA1BC,G,MAVD,SAACC,GAER,OAAQ,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,iBAAiBC,OAAO,UAC7DJ,EAAMK,YC2BRC,E,YA1BX,WAAYN,GAAO,IAAD,8BACf,4CAAMA,KACCO,MAAM,CACPC,UAAS,GAHA,E,+EAQAC,EAAMC,GAClBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKpB,OADkBG,KAAKJ,MAAMC,SAAtBA,SAEU,oDAA+BG,KAAKX,MAAMK,a,GAjB7CQ,IAAMC,WCwEnBC,E,YA3Db,aAAe,IAAD,8BACZ,+CAMFC,aAAe,SAACC,GACd,IAAIvB,EAAQuB,EAAEC,OAAOxB,MACjBA,EAAMyB,OAAS,EACjB,EAAKP,SAAS,CAAEQ,YAAa1B,IAI5B,EAAKkB,SAAS,CAAEQ,YAAa,MAZhC,EAAKb,MAAQ,CACXtB,OAAQ,GACRmC,YAAa,IAJH,E,iFAmBO,IAAD,OAClBlC,QAAQC,IAAI,gBACZkC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAAE3B,OAAQwC,OACtCC,OAAM,SAAAC,GAAE,OAAIzC,QAAQC,IAAIwC,Q,+BAMnB,IAAD,EACyBhB,KAAKJ,MAA7BtB,EADD,EACCA,OAAQmC,EADT,EACSA,YAEZQ,EAAU3C,EAAO4C,QAAO,SAAAvC,GAC1B,OAAOA,EAAMT,SAASiD,cAAcC,SAASX,EAAYU,kBAK3D,OACG7C,EAAOkC,OACN,yBAAKzC,UAAU,MACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,gBAAd,iBACA,kBAAC,EAAD,CAAWiB,SAAUgB,KAAKK,gBAE5B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU/B,OAAQ2C,OARP,8C,GA1CLf,IAAMC,WCFJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.32c8d049.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\n\r\nconst Card = ({robo,handleclick})=>{\r\n\r\n        return(\r\n     \r\n\r\n <article onClick={()=>handleclick(robo)} id ={robo.id} className=\"  bg-green ml3 mb2 br3 pa4 grow \">\r\n         <div className=\"tc\">\r\n <img src={`http://robohash.org/id=${robo.id}/100+100`}\r\n  className=\"br-100 h4 w4 dib ba b--black-05 pa2\" \r\n  title=\"Photo of a kitty staring at you\" />\r\n    <h2 className=\"f3 mb1\">{robo.username}</h2>\r\n    <h3 className=\"f5 fw4 white mt0\">{`${robo.name}`}</h3>\r\n    <h3 className=\"f5 fw4 white mt0\">{`${robo.email}`}</h3>\r\n  </div>\r\n   </article>\r\n   \r\n)\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './card';\r\n\r\nconst Cardlist = ({robots})=>{\r\n\r\n     const handleclick= (robo)=>{\r\n              console.log(`clicked by ${robo.username}`);\r\n              alert(`clicked by ${robo.username}`);\r\n      }\r\n\r\n         return(\r\n               <div className=\" flex flex-wrap justify-center mt2 \"> \r\n         { robots.map((robot,i)=> <Card handleclick={handleclick} key={i} robo={robot} />) }\r\n               \r\n               </div>\r\n         )\r\n\r\n}\r\n\r\nexport default Cardlist;","import React from 'react'\r\n\r\nconst Searchbar = ({value,onChange}) =>{\r\n\r\n        return(\r\n            \r\n    \r\n            <div className=\"pa2 mt0\">\r\n      {/* <label for=\"name\" className=\"f6 b db mb2\">Name <span class=\"normal black-60\">(optional)</span></label> */}\r\n          <input id=\"name\" value={value} onChange={onChange} placeholder=\"search \"\r\n           className=\" pa2 ba b--green bg-lightest-blue w-50\"\r\n            type=\"text\" aria-describedby=\"name-desc\"/>\r\n\r\n          </div>\r\n\r\n        )\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default Searchbar; ","import React from 'react'\r\nconst Scroll =(props)=>{\r\n\r\n       return( <div style={{overflowY:'scroll',border:'2px solid grey',height:'500px'}}>\r\n                {props.children}\r\n\r\n               </div>\r\n       )\r\n\r\n\r\n}\r\nexport default Scroll;","\r\nimport React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n    \r\n    constructor(props){\r\n       super(props)\r\n         this.state={\r\n             haserror:false,\r\n\r\n         }\r\n\r\n    }\r\n    componentDidCatch(error,info){\r\n          this.setState({haserror:true});\r\n    }\r\n\r\n    render(){\r\n              const {haserror} =this.state.haserror;\r\n              return (\r\n                     haserror? <h1>OOPS something wrong</h1>: this.props.children\r\n                   \r\n              )\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default ErrorBoundary;","import React from 'react';\nimport 'tachyons';\n//import React, { PureComponent } from 'react'\nimport Cardlist from '../components/cardlist';\n\nimport Searchbar from '../components/searchbar';\nimport 'tachyons';\nimport './app.css';\nimport Scroll from '../components/scroll';\nimport ErrorBoundary from './errorboundary';\n\n\n//change in appjs1\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    }\n  }\n  handleChange = (e) => {\n    let value = e.target.value;\n    if (value.length > 0) {\n      this.setState({ searchfield: value });\n\n    }\n    else {\n       this.setState({ searchfield: \"\" });\n\n    }\n\n  };\n  componentDidMount() {\n    console.log(\"in did mount\");\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }))\n      .catch(er => console.log(er))\n  }\n\n\n\n\n  render() {\n    const { robots, searchfield } = this.state;\n   // if(true) throw new Error(\"error has occured\");\n    let srobots = robots.filter(robot => {\n      return robot.username.toLowerCase().includes(searchfield.toLowerCase())\n    });\n\n\n\n    return (\n      !robots.length ? <h1>Loading...</h1> :\n        <div className=\"tc\">\n          <div className=\" bg-light-green \">\n            <h1 className=\" pa4 mt0 f1 \"> Robo Friends</h1>\n            <Searchbar onChange={this.handleChange} />\n          </div>\n          <Scroll>\n            <ErrorBoundary> \n            <Cardlist robots={srobots} />\n            </ErrorBoundary>\n          </Scroll>\n\n        </div>\n    );\n\n\n\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers//App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}